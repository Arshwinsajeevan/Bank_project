Data sharing
------------
html       ts
view       component

2 event on ts 

click on botton , change on 

Data binding(to share data)
--------------------------
1.One way Binding
    1.1 component to view
        1.1.1 string interpollation {{}}
        1.1.2 property binding     [property]="value"

    1.2 view to component
        1.2.1 event binding     (event name) = "methodname()"
        1.2.2 $event binding    (event name) = "methodname($event)"
        1.2.3 event binding using templete reference variable. #variable_name 

2.Two way binding
    2.1 ngModel                 FormsModule (a Module in ngModel)   (simplest method)
                    [(ngModel)]="value"


routing in angular
------------------

navigateByUrl    IS A METHOD OF CLASS ROUTER

Dependency injection
-------------------

to share datas between two classes
injection inside constructor

syntax: access specifier(private or public(default-public)) variable:className

Angular services
---------------

to store redendent(duplicate) data

*** ng g s service_name (to create)

* Direct contact with database are created on DataService , and call the logic

(ngSubmit)=".....()"  (redirect to connected page when press 'Enter' , used in Form)


------------------------------------------------------------------------------------------------------

Angular Dierectives
------------------
Used to manage DOM(Document object model) in Angular

-1. Structural Dierective  - to handle structured datas in view of a component
                             can apply datas directly from array or object in html

                        - *ngFor  - to access element from array
                        - *ngIf

-2. Component Dierectives
    - used to specify the HTML templates

-3. Atribute Dierectives
    - used to give attributs to DOM



Form validation in angular
-------------------------

1.Templete Driven Form - first html form then apply validation

2. Model Driven Form - a model create for form in ts then apply validation methods
                       
(imp)                  - ReactiveFormsModule  -module used for model form creation
                       - FormBuilder  -class in Reactive form for model form creation

                                 a model form contain
                                            -form group
                                            -array
                                            -controler   (instead of ngModel formControlName is used)

- can access the output of input attribute
        this.registerForm.get('uname')?.errors   ,  this.registerForm.get('uname')?.touched
        
        match with rule
        not match


local storage in angular
-----------------------

-setItem
-getItem
-removeItem

Parent child component communication in Angular
---------------------------------------------
@Input  - parent to child data sharing
@Output  - chils to parent data sharing

datas only share via selector of component

-the child selector is given in parent (there will appear the content of child)


User Defined Event Creation In Angular
-------------------------------------
- EventEmitter (from Angular core) - class used to create events
- emit()                           - to start the event


Date in Angular
--------------
Date -class

-create an object of class Date , to access date and time


Angular pipe
-----------

to transfer datas into another format
    eg: date pipe


--------------------
npm i  -used to clone
-------------------- 


* CLIENT SERVER INTEGRATION
-------------------------
------------------------

http request creation
--------------------

HttpClientModule  -module
HttpClient        -class


Asynchronous request in ts
--------------------------

js - promise   
        -resolve  -then()
        -reject   -catch()

ts - observable
        -resolve  -subscribe()
        -reject   -catch()

Rxjs  - library used to solve asynchronous code in ts
(reactive extension for js)


Append token in headers of http
------------------------------

HttpHeaders  - class to create header object

 - let headers = new HttpHeaders()

Append token in header object

 - headers.append('access-token',token)
  